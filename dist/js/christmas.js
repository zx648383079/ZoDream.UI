var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var vendors = ['webkit', 'moz'];
for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame =
        window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
}
if (!window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime_1 = 0;
    window.requestAnimationFrame = function (callback) {
        var currTime = new Date().getTime();
        //为了使setTimteout的尽可能的接近每秒60帧的效果
        var timeToCall = Math.max(0, 16 - (currTime - lastTime_1));
        var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime_1 = currTime + timeToCall;
        return id;
    };
    window.cancelAnimationFrame = function (id) {
        window.clearTimeout(id);
    };
}
var Time = /** @class */ (function () {
    function Time(callback, space, time) {
        if (space === void 0) { space = 16; }
        if (time === void 0) { time = 0; }
        this.callback = callback;
        this.space = space;
        this.time = time;
        this._index = 0;
        this.isActive = true;
        this._time = 0;
    }
    Time.prototype.run = function () {
        if (!this.isActive) {
            return;
        }
        this._index += 16;
        if (this._index < this.space) {
            return;
        }
        this.callback();
        this._index = 0;
        this._time++;
        if (this.time > 0 && this._time >= this.time) {
            this.isActive = false;
            return;
        }
    };
    return Time;
}());
var Timer = /** @class */ (function () {
    function Timer(callback, space, time) {
        if (space === void 0) { space = 16; }
        if (time === void 0) { time = 0; }
        this.times = [];
        this.isAuto = true;
        if (callback) {
            this.add(callback, space, time);
        }
        if (this.isAuto) {
            this.start();
        }
    }
    Timer.prototype.add = function (callback, space, time) {
        if (space === void 0) { space = 16; }
        if (time === void 0) { time = 0; }
        this.times.push(new Time(callback, space, time));
        return this;
    };
    Timer.prototype.start = function () {
        this._loop();
    };
    Timer.prototype._loop = function () {
        this.stop();
        var instance = this;
        this._handle = window.requestAnimationFrame(function () {
            var isEnd = true;
            instance.times.forEach(function (time) {
                if (time.isActive) {
                    time.run();
                    isEnd = false;
                }
            });
            if (isEnd && instance.isAuto) {
                instance.stop();
                return;
            }
            instance._loop();
        });
    };
    Timer.prototype.stop = function () {
        if (this._handle) {
            window.cancelAnimationFrame(this._handle);
        }
        this._handle = null;
    };
    return Timer;
}());
var Preloader = /** @class */ (function () {
    function Preloader() {
    }
    Preloader.loadImg = function (name, url, cb) {
        var img = new Image();
        img.src = url;
        img.onload = function () {
            cb && cb();
        };
        Preloader.caches[name] = img;
    };
    /**
     * get<T>
     */
    Preloader.get = function (name) {
        return Preloader.caches[name];
    };
    Preloader.caches = {};
    return Preloader;
}());
var Scene = /** @class */ (function () {
    function Scene() {
        this.fps = 60;
        this.children = [];
    }
    Scene.prototype.setFPS = function (fps) {
        this.fps = fps;
    };
    /**
     * addChild
     */
    Scene.prototype.addChild = function (kid) {
        this.children.push(kid);
        return this;
    };
    /**
     * init
     */
    Scene.prototype.init = function () {
        if (!this.canvas) {
            this.canvas = Storyboard.create(this.stage.canvas);
        }
    };
    Scene.prototype.update = function () {
    };
    Scene.prototype.draw = function (ctx) {
        var _this = this;
        this.canvas.clear();
        this.children.forEach(function (item) {
            item.draw(_this.canvas);
        });
        ctx.draw(this.canvas);
    };
    /**
     * destory
     */
    Scene.prototype.destory = function () {
    };
    return Scene;
}());
var Sprite = /** @class */ (function () {
    function Sprite() {
    }
    Sprite.prototype.draw = function (ctx) {
    };
    return Sprite;
}());
var Stage = /** @class */ (function () {
    /**
     *
     */
    function Stage(element) {
        this.canvas = Storyboard.parse(element);
        this.canvas.fullScreen();
        this.init();
    }
    /**
     * init
     */
    Stage.prototype.init = function () {
        this.loop();
    };
    /**
     * loop
     */
    Stage.prototype.loop = function () {
        this.timer = new Timer(this.update.bind(this));
    };
    /**
     * nevigate
     */
    Stage.prototype.nevigate = function (scene) {
        this.scene && this.scene.destory();
        //this.canvas.clear();
        this.scene = scene;
        this.scene.stage = this;
        this.scene.init();
    };
    /**
     * update
     */
    Stage.prototype.update = function () {
        this.scene.update();
        this.draw();
    };
    /**
     * draw
     */
    Stage.prototype.draw = function () {
        this.canvas.clear();
        this.scene.draw(this.canvas);
    };
    return Stage;
}());
var Storyboard = /** @class */ (function () {
    function Storyboard(canvas) {
        this.canvas = canvas;
        this.context = this.canvas.getContext('2d');
    }
    /**
     * width
     */
    Storyboard.prototype.width = function () {
        return this.canvas.width;
    };
    /**
     * height
     */
    Storyboard.prototype.height = function () {
        return this.canvas.height;
    };
    Storyboard.prototype.clear = function () {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        return this;
    };
    Storyboard.prototype.draw = function (image, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var img = image instanceof Storyboard ? image.canvas : image;
        if (args.length >= 7) {
            var centerX = (args[2] + args[4]), centerY = (args[3] + args[5]);
            this.context.save();
            this.context.translate(centerX, centerY);
            this.context.rotate(args[6]);
            this.context.drawImage(img, x, y, args[0], args[1], 0, 0, args[4], args[5]);
            this.context.restore();
        }
        else if (args.length == 6) {
            this.context.drawImage(img, x, y, args[0], args[1], args[2], args[3], args[4], args[5]);
        }
        else if (args.length >= 2) {
            this.context.drawImage(img, x, y, args[0], args[1]);
        }
        else {
            this.context.drawImage(img, x, y);
        }
        return true;
    };
    /**
     * fullScreen
     */
    Storyboard.prototype.fullScreen = function () {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
        return this;
    };
    Storyboard.create = function (width, height) {
        var canvas = document.createElement("canvas");
        if (typeof width == 'object') {
            canvas.width = width.width();
            canvas.height = width.height();
        }
        else {
            canvas.width = width;
            canvas.height = height;
        }
        return new Storyboard(canvas);
    };
    Storyboard.parse = function (element) {
        return new Storyboard(typeof element == 'string' ? document.getElementById(element) : element);
    };
    return Storyboard;
}());
var MainScene = /** @class */ (function (_super) {
    __extends(MainScene, _super);
    function MainScene() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._time = 0;
        _this._wind = 0;
        return _this;
    }
    /**
     * init
     */
    MainScene.prototype.init = function () {
        _super.prototype.init.call(this);
        this.createSprite();
    };
    MainScene.prototype.createSprite = function () {
        this._time++;
        if (this._time > 1000000) {
            this._time = 0;
        }
        if (this._time % 40 > 0) {
            return;
        }
        var count = Math.floor(Math.random() * this.canvas.width() / 200);
        if (count < 1) {
            return;
        }
        for (; count > 0; count--) {
            this.addChild(new SnowSprite(this.canvas.width(), this.canvas.height()));
        }
    };
    MainScene.prototype.getWind = function () {
        if (this._time % 200 > 0) {
            return this._wind;
        }
        var old_wind = this._wind;
        this._wind = (Math.random() > .5 ? 1 : -1) * Math.random();
        if (Math.abs(old_wind - this._wind) > 1) {
            this._wind = old_wind > 0 ? old_wind - .1 : old_wind + .1;
        }
        return this._wind;
    };
    MainScene.prototype.update = function () {
        var windSpeed = this.getWind(); //Math.random() < 0.5 ? 0.0005 : -0.0005;
        for (var i = this.children.length - 1; i >= 0; i--) {
            var kid = this.children[i];
            if (kid.isOut()) {
                this.children.splice(i, 1);
                return;
            }
            kid.update(windSpeed);
        }
        this.createSprite();
    };
    return MainScene;
}(Scene));
var MainStage = /** @class */ (function (_super) {
    __extends(MainStage, _super);
    function MainStage(element) {
        return _super.call(this, element) || this;
    }
    /**
     * init
     */
    MainStage.prototype.init = function () {
        var _this = this;
        Preloader.loadImg('snow', 'image/snow.png', function () {
            _this.nevigate(new MainScene());
            _super.prototype.init.call(_this);
        });
    };
    return MainStage;
}(Stage));
var SnowSprite = /** @class */ (function () {
    /**
     *
     */
    function SnowSprite(maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this.x = 0;
        this.y = 0;
        this.kind = 0;
        this.size = 0;
        this.speedX = 0;
        this.speedY = 0;
        this.deg = 0;
        this.image = Preloader.get('snow');
        this.reset();
    }
    /**
     * reset
     */
    SnowSprite.prototype.reset = function () {
        this.x = Math.random() * this.maxWidth;
        this.size = Math.random() * 20 + 10;
        //this.speedX = Math.random() * 2 - 1;
        this.speedY = Math.random() * .8 + .2;
        this.kind = Math.floor(Math.random() * 6);
    };
    SnowSprite.prototype.update = function (windSpeed) {
        var degDelta = (windSpeed > 0 ? 1 : -1) * (Math.random() * 0.6 + 0.2);
        this.speedX = windSpeed * (this.kind * .01 + 1 - this.size / 100);
        this.x += this.speedX;
        this.y += this.speedY;
        this.deg += degDelta;
    };
    /**
     * isOut
     */
    SnowSprite.prototype.isOut = function () {
        return this.x < 0 || this.x > this.maxWidth || this.y > this.maxHeight;
    };
    /**
     * draw
     */
    SnowSprite.prototype.draw = function (ctx) {
        if (this.isOut()) {
            return;
        }
        ctx.draw(this.image, this.kind * 200, 0, 200, 200, this.x, this.y, this.size, this.size, this.deg * Math.PI / 180);
    };
    return SnowSprite;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
