var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Eve = /** @class */ (function () {
    function Eve() {
    }
    Eve.prototype.on = function (event, callback) {
        this.options['on' + event] = callback;
        return this;
    };
    Eve.prototype.hasEvent = function (event) {
        return this.options.hasOwnProperty('on' + event);
    };
    Eve.prototype.trigger = function (event) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var realEvent = 'on' + event;
        if (!this.hasEvent(event)) {
            return;
        }
        return (_a = this.options[realEvent]).call.apply(_a, [this].concat(args));
    };
    return Eve;
}());
var Point = /** @class */ (function () {
    function Point(index, x, width, height) {
        var _a;
        this.index = index;
        this.width = width;
        this.height = height;
        this.elements = [];
        if (typeof x == 'number') {
            this.x = x;
            return;
        }
        this.elements.push(x);
        _a = this.getElementWidthAndHeight(), this.width = _a[0], this.height = _a[1];
        this.x = -this.width;
    }
    /**
     * 取元素的x
     * @param width
     */
    Point.prototype.getLeft = function (width) {
        return this.x - (width - 3 * this.width) / 2;
    };
    /**
     * 获取元素的宽和高
     */
    Point.prototype.getElementWidthAndHeight = function () {
        return [this.elements[0].width(), this.elements[0].height()];
    };
    /**
     * 应用当前的宽和高
     */
    Point.prototype.applyWidthAndHeight = function () {
        var instance = this;
        var _a = this.getElementWidthAndHeight(), width = _a[0], height = _a[1];
        if (height == this.height && this.width != width) {
            // 等比例缩放
            this.height = this.width * height / width;
        }
        $.each(this.elements, function (i, ele) {
            ele.width(instance.width);
            ele.height(instance.height);
        });
    };
    return Point;
}());
var SliderItem = /** @class */ (function (_super) {
    __extends(SliderItem, _super);
    function SliderItem(element, options) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this._data = [];
        _this._length = 0;
        _this._index = 0;
        var option = _this.element.attr('data-slider');
        if (option == '1') {
            return _this;
        }
        _this._extendOption(options, option);
        var items = _this.element.find(_this.options.item);
        if (items.length < 1) {
            return _this;
        }
        _this.options.width = _this._getOption('width');
        _this.options.height = _this._getOption('height');
        _this.options.animationmode = _this._getOption('animationmode');
        _this.options.haspoint = _this._getOption('haspoint');
        _this.element.addClass(_this.options.animationmode + '-slider');
        _this._length = items.length;
        _this._box = items.parent();
        _this.element.attr('data-slider', 1);
        if (_this._length < 2) {
            _this._initOnly(items);
            return _this;
        }
        _this._init(items);
        return _this;
    }
    SliderItem.prototype._timeCallback = function () {
        if (this._getOption('auto')) {
            this.next();
        }
    };
    SliderItem.prototype._extendOption = function (options, option) {
        try {
            option = JSON.parse(option);
        }
        catch (error) {
        }
        this.options = $.extend({}, options, option);
    };
    /**
     * 初始化只有一张
     */
    SliderItem.prototype._initOnly = function (items) {
        var instance = this;
        this._resetOnly(items);
        $(window).resize(function () {
            instance._resetOnly(items);
        });
    };
    /**
     * 设置一张图的高度
     * @param item
     */
    SliderItem.prototype._resetOnly = function (item) {
        var width = this.options.width > 0 ? this._getWidth(this.options.width) : item.width();
        var height = this.options.height > 0 ? this._getWidth(this.options.height) : item.height();
        item.css({ height: height, width: width });
        this.element.css({ height: height, width: width });
    };
    SliderItem.prototype._needMove = function () {
        return this.options.animationmode != 'fade';
    };
    SliderItem.prototype._copyItem = function (items) {
        for (var j = 0; j < 2; j++) {
            for (var i = 0, length_1 = items.length; i < length_1; i++) {
                var newLi = $(items[i].cloneNode(true));
                this._data[i].elements.push(newLi);
                this._box.append(newLi);
            }
        }
    };
    SliderItem.prototype._init = function (items) {
        var instance = this;
        items.each(function (i, item) {
            var point = new Point(i, $(item));
            instance._data.push(point);
        });
        /**
         * 复制两次
         */
        if (this._needMove()) {
            this._copyItem(items);
        }
        this.resize();
        // 输出可点击的列表
        if (this.options.haspoint) {
            this._addListPoint();
        }
        this._bindEvent();
        this._setTime();
    };
    SliderItem.prototype._bindEvent = function () {
        var instance = this;
        this.element.find(this.options.previous).click(function () {
            instance.previous();
        });
        this.element.find(this.options.next).click(function () {
            instance.next();
        });
        $(window).resize(function () {
            instance.resize();
        });
        if (!$.fn.swipe) {
            return;
        }
        this.element.swipe({
            swipeLeft: function () {
                instance.next();
            },
            swipeRight: function () {
                instance.previous();
            }
        });
    };
    /**
     * 获取配置
     * @param name
     */
    SliderItem.prototype._getOption = function (name) {
        var val = this.element.data(name);
        if (val == 'false') {
            return false;
        }
        if (val == 'true') {
            return true;
        }
        if (typeof val == 'boolean') {
            return val;
        }
        return val || this.options[name];
    };
    SliderItem.prototype._getWidth = function (reltive) {
        if (reltive > 1) {
            return reltive;
        }
        return this.element.width() * reltive;
    };
    SliderItem.prototype._setTime = function () {
        this._time = (this._getOption('spaceTime') + this._getOption('animationTime')) / 16;
    };
    /**
     * 添加跳转点
     * @param count
     */
    SliderItem.prototype._addListPoint = function () {
        var html = '';
        for (var i = 1; i <= this._length; i++) {
            html += '<li><span>' + i + '</span></i>';
        }
        this.element.append('<ul class="slider-point">' + html + '</ul>');
        var instance = this;
        this.element.on(this._getOption('pointEvent'), ".slider-point li", function () {
            instance.index = $(this).index();
        });
    };
    /**
     * 浏览器尺寸变化
     */
    SliderItem.prototype.resize = function () {
        var instance = this;
        var maxWidth = this.element.width();
        var width = 0;
        $.each(this._data, function (i, point) {
            if (instance.options.width > 0) {
                point.width = instance._getWidth(instance.options.width);
            }
            if (instance.options.height > 0) {
                point.height = instance._getWidth(instance.options.height);
            }
            point.applyWidthAndHeight();
            width += point.width;
            point.x = -width;
        });
        if (this._needMove()) {
            this._applySize(width, maxWidth);
        }
        this.index = this._index;
    };
    SliderItem.prototype._applySize = function (width, maxWidth) {
        $.each(this._data, function (i, point) {
            point.x -= width;
        });
        this._box.css({ left: this._data[this._index].getLeft(maxWidth) + "px" });
        this._box.width(width * 3);
    };
    Object.defineProperty(SliderItem.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (index) {
            this.goto(index);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 下一个
     */
    SliderItem.prototype.next = function () {
        this.index++;
    };
    /**
     * 上一个
     */
    SliderItem.prototype.previous = function () {
        this.index--;
    };
    /**
     * 获取起始点和终点
     * @param index
     */
    SliderItem.prototype._getPoint = function (index) {
        if (index < 0) {
            var last = this._data[this._data.length - 1];
            var point = new Point(index, this._data[0].x + last.width, last.width, last.height);
            return [point, last];
        }
        if (index >= this._data.length) {
            var first = this._data[0];
            var point = new Point(index, this._data[this._data.length - 1].x - first.width, first.width, first.height);
            return [point, first];
        }
        return [this._data[index], this._data[index]];
    };
    /**
     * 跳转
     * @param index
     */
    SliderItem.prototype.goto = function (index) {
        this._setTime();
        this._changePoint(index);
    };
    SliderItem.prototype._changePoint = function (index) {
        if (this._needMove()) {
            return this._movePoint(index);
        }
        if (index < 0) {
            index = this._data.length - 1;
        }
        else if (index >= this._data.length) {
            index = 0;
        }
        var instance = this;
        var time = this._getOption('animationTime');
        this._data.forEach(function (point, i) {
            if (i == index) {
                point.elements[0].animate({ opacity: 1 }, time, 'swing', function () {
                    instance._showPoint(index);
                });
                instance.trigger('change', point);
                return;
            }
            point.elements[0].animate({ opacity: 0 }, time, 'swing');
        });
    };
    SliderItem.prototype._showPoint = function (index) {
        this._index = index;
        if (!this.options.haspoint) {
            return;
        }
        this.element.find(".slider-point li")
            .eq(index).addClass("active").siblings().removeClass("active");
    };
    SliderItem.prototype._movePoint = function (index) {
        var points = this._getPoint(index);
        var width = this.element.width();
        this.element.height(points[0].height);
        var instance = this;
        this._goAndCallback(points[0].getLeft(width), function () {
            if (points[0].index != points[1].index) {
                instance._box.css({ left: points[1].getLeft(width) + 'px' });
            }
            instance._showPoint(points[1].index);
        });
        this.trigger.apply(this, ['change'].concat(points));
    };
    /**
     * 移动动画及回调
     * @param left
     * @param callback
     */
    SliderItem.prototype._goAndCallback = function (left, callback) {
        this._box.animate({ left: left + "px" }, this._getOption('animationtime'), this.options.animationmode, callback);
    };
    SliderItem.prototype.run = function () {
        if (this._length < 1) {
            return;
        }
        this._time--;
        if (this._time <= 0) {
            this._timeCallback();
        }
    };
    return SliderItem;
}(Eve));
/*!
 * jquery.slider - https://github.com/zx648383079/ZoDream.UI
 * Version - 1.0
 * Licensed under the MIT license - http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2017 ZoDream
 */
var Slider = /** @class */ (function () {
    function Slider(element, options) {
        var _this = this;
        this.element = element;
        this._data = [];
        this.options = $.extend({}, new SliderDefaultOptions(), options);
        if (this.element.length == 0) {
            return;
        }
        this.element.each(function (i, item) {
            _this.addItem($(item));
        });
        this._runTimer();
    }
    Slider.prototype.addItem = function (item) {
        if (item instanceof SliderItem) {
            this._data.push(item);
            return;
        }
        this._data.push(new SliderItem(item, this.options));
    };
    /**
     * 倒序循环
     * @param callback 返回false 结束循环，返回 true 删除
     * @param i 初始值
     */
    Slider.prototype.map = function (callback, i) {
        var _this = this;
        if (i === void 0) { i = this._data.length - 1; }
        if (typeof i != 'number') {
            i.forEach(function (j) {
                if (j < 0 || j >= _this._data.length) {
                    return;
                }
                callback(_this._data[j], j);
            });
            return;
        }
        if (i >= this._data.length) {
            i = this._data.length - 1;
        }
        for (; i >= 0; i--) {
            var item = this._data[i];
            var result = callback(item, i);
            if (result == true) {
                this._data.splice(i, 1);
            }
            if (result == false) {
                return;
            }
        }
    };
    Slider.prototype._runTimer = function () {
        var instance = this;
        this._timer = requestAnimationFrame(function () {
            instance.map(function (item) {
                item.run();
            });
            instance._runTimer();
        });
    };
    Slider.prototype._cancelTimer = function () {
        if (this._timer) {
            cancelAnimationFrame(this._timer);
        }
    };
    return Slider;
}());
var SliderDefaultOptions = /** @class */ (function () {
    function SliderDefaultOptions() {
        this.item = 'li';
        this.spacetime = 3000;
        this.animationtime = 1000;
        this.animationmode = "swing";
        this.previous = ".slider-previous";
        this.next = ".slider-next";
        this.haspoint = true;
        this.pointevent = "click";
        this.auto = true;
    }
    return SliderDefaultOptions;
}());
;
(function ($) {
    $.fn.slider = function (options) {
        return new Slider(this, options);
    };
})(jQuery);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LnRzIiwicG9pbnQudHMiLCJpdGVtLnRzIiwianF1ZXJ5LnNsaWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7SUFBQTtJQW1CQSxDQUFBO0lBaEJBLGdCQUFBLEdBQUEsVUFBQSxLQUFBLEVBQUEsUUFBQTtRQUNBLElBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQTtRQUNBLE9BQUEsSUFBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLHNCQUFBLEdBQUEsVUFBQSxLQUFBO1FBQ0EsT0FBQSxJQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEscUJBQUEsR0FBQSxVQUFBLEtBQUE7O1FBQUEsY0FBQTthQUFBLFVBQUEsRUFBQSxxQkFBQSxFQUFBLElBQUE7WUFBQSw2QkFBQTs7UUFDQSxJQUFBLFNBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQSxDQUFBO1FBQ0EsSUFBQSxDQUFBLElBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBLEVBQUE7WUFDQSxPQUFBO1NBQ0E7UUFDQSxPQUFBLENBQUEsS0FBQSxJQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxZQUFBLElBQUEsU0FBQSxJQUFBLEdBQUE7SUFDQSxDQUFBO0lBQ0EsVUFBQTtBQUFBLENBbkJBLEFBbUJBLElBQUE7QUNuQkE7SUFDQSxlQUNBLEtBQUEsRUFDQSxDQUFBLEVBQ0EsS0FBQSxFQUNBLE1BQUE7O1FBSEEsVUFBQSxHQUFBLEtBQUEsQ0FBQTtRQUVBLFVBQUEsR0FBQSxLQUFBLENBQUE7UUFDQSxXQUFBLEdBQUEsTUFBQSxDQUFBO1FBYUEsYUFBQSxHQUFBLEVBQUEsQ0FBQTtRQVhBLElBQUEsT0FBQSxDQUFBLElBQUEsUUFBQSxFQUFBO1lBQ0EsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7WUFDQSxPQUFBO1NBQ0E7UUFDQSxJQUFBLENBQUEsUUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtRQUNBLG9DQUFBLEVBQUEsa0JBQUEsRUFBQSxtQkFBQSxDQUFBO1FBQ0EsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLENBQUE7SUFDQSxDQUFBO0lBTUE7OztPQUdBO0lBQ0EsdUJBQUEsR0FBQSxVQUFBLEtBQUE7UUFDQSxPQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUE7O09BRUE7SUFDQSx3Q0FBQSxHQUFBO1FBQ0EsT0FBQSxDQUFBLElBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxFQUFBLEVBQUEsSUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBOztPQUVBO0lBQ0EsbUNBQUEsR0FBQTtRQUNBLElBQUEsUUFBQSxHQUFBLElBQUEsQ0FBQTtRQUNBLElBQUEsb0NBQUEsRUFBQSxhQUFBLEVBQUEsY0FBQSxDQUFBO1FBQ0EsSUFBQSxNQUFBLElBQUEsSUFBQSxDQUFBLE1BQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxJQUFBLEtBQUEsRUFBQTtZQUNBLFFBQUE7WUFDQSxJQUFBLENBQUEsTUFBQSxHQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsTUFBQSxHQUFBLEtBQUEsQ0FBQTtTQUNBO1FBQ0EsQ0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsUUFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBLEdBQUE7WUFDQSxHQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQTtZQUNBLEdBQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBQ0EsWUFBQTtBQUFBLENBbERBLEFBa0RBLElBQUE7QUNsREE7SUFBQSw4QkFBQTtJQUNBLG9CQUNBLE9BQUEsRUFDQSxPQUFBO1FBRkEsWUFJQSxpQkFBQSxTQXVCQTtRQTFCQSxhQUFBLEdBQUEsT0FBQSxDQUFBO1FBOEJBLFdBQUEsR0FBQSxFQUFBLENBQUE7UUFFQSxhQUFBLEdBQUEsQ0FBQSxDQUFBO1FBRUEsWUFBQSxHQUFBLENBQUEsQ0FBQTtRQTlCQSxJQUFBLE1BQUEsR0FBQSxLQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsTUFBQSxJQUFBLEdBQUEsRUFBQTs7U0FFQTtRQUNBLEtBQUEsQ0FBQSxhQUFBLENBQUEsT0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO1FBQ0EsSUFBQSxLQUFBLEdBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLEVBQUE7O1NBRUE7UUFDQSxLQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsR0FBQSxLQUFBLENBQUEsVUFBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBO1FBQ0EsS0FBQSxDQUFBLE9BQUEsQ0FBQSxNQUFBLEdBQUEsS0FBQSxDQUFBLFVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtRQUNBLEtBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxHQUFBLEtBQUEsQ0FBQSxVQUFBLENBQUEsZUFBQSxDQUFBLENBQUE7UUFDQSxLQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsR0FBQSxLQUFBLENBQUEsVUFBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBO1FBQ0EsS0FBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLEdBQUEsU0FBQSxDQUFBLENBQUE7UUFDQSxLQUFBLENBQUEsT0FBQSxHQUFBLEtBQUEsQ0FBQSxNQUFBLENBQUE7UUFDQSxLQUFBLENBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQTtRQUNBLEtBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsS0FBQSxDQUFBLE9BQUEsR0FBQSxDQUFBLEVBQUE7WUFDQSxLQUFBLENBQUEsU0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBOztTQUVBO1FBQ0EsS0FBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQTs7SUFDQSxDQUFBO0lBY0Esa0NBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxDQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUEsRUFBQTtZQUNBLElBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQTtTQUNBO0lBQ0EsQ0FBQTtJQUVBLGtDQUFBLEdBQUEsVUFBQSxPQUFBLEVBQUEsTUFBQTtRQUNBLElBQUE7WUFDQSxNQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtTQUNBO1FBQUEsT0FBQSxLQUFBLEVBQUE7U0FFQTtRQUNBLElBQUEsQ0FBQSxPQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBOztPQUVBO0lBQ0EsOEJBQUEsR0FBQSxVQUFBLEtBQUE7UUFDQSxJQUFBLFFBQUEsR0FBQSxJQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsVUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBQTtZQUNBLFFBQUEsQ0FBQSxVQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7UUFDQSxDQUFBLENBQUEsQ0FBQTtJQUNBLENBQUE7SUFFQTs7O09BR0E7SUFDQSwrQkFBQSxHQUFBLFVBQUEsSUFBQTtRQUNBLElBQUEsS0FBQSxHQUFBLElBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxFQUFBLENBQUE7UUFDQSxJQUFBLE1BQUEsR0FBQSxJQUFBLENBQUEsT0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBO1FBQ0EsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEsOEJBQUEsR0FBQTtRQUNBLE9BQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLElBQUEsTUFBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLDhCQUFBLEdBQUEsVUFBQSxLQUFBO1FBQ0EsS0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTtZQUNBLEtBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLFFBQUEsR0FBQSxLQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxRQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7Z0JBQ0EsSUFBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQTtnQkFDQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7Z0JBQ0EsSUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7YUFDQTtTQUNBO0lBQ0EsQ0FBQTtJQUVBLDBCQUFBLEdBQUEsVUFBQSxLQUFBO1FBQ0EsSUFBQSxRQUFBLEdBQUEsSUFBQSxDQUFBO1FBQ0EsS0FBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLENBQUEsRUFBQSxJQUFBO1lBQ0EsSUFBQSxLQUFBLEdBQUEsSUFBQSxLQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBO1lBQ0EsUUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7UUFDQSxDQUFBLENBQUEsQ0FBQTtRQUNBOztXQUVBO1FBQ0EsSUFBQSxJQUFBLENBQUEsU0FBQSxFQUFBLEVBQUE7WUFDQSxJQUFBLENBQUEsU0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO1NBQ0E7UUFDQSxJQUFBLENBQUEsTUFBQSxFQUFBLENBQUE7UUFDQSxXQUFBO1FBQ0EsSUFBQSxJQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsRUFBQTtZQUNBLElBQUEsQ0FBQSxhQUFBLEVBQUEsQ0FBQTtTQUNBO1FBQ0EsSUFBQSxDQUFBLFVBQUEsRUFBQSxDQUFBO1FBQ0EsSUFBQSxDQUFBLFFBQUEsRUFBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLCtCQUFBLEdBQUE7UUFDQSxJQUFBLFFBQUEsR0FBQSxJQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQTtZQUNBLFFBQUEsQ0FBQSxRQUFBLEVBQUEsQ0FBQTtRQUNBLENBQUEsQ0FBQSxDQUFBO1FBQ0EsSUFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUFBLENBQUE7WUFDQSxRQUFBLENBQUEsSUFBQSxFQUFBLENBQUE7UUFDQSxDQUFBLENBQUEsQ0FBQTtRQUNBLENBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxNQUFBLENBQUE7WUFDQSxRQUFBLENBQUEsTUFBQSxFQUFBLENBQUE7UUFDQSxDQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEtBQUEsRUFBQTtZQUNBLE9BQUE7U0FDQTtRQUNBLElBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBO1lBQ0EsU0FBQSxFQUFBO2dCQUNBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQTtZQUNBLENBQUE7WUFDQSxVQUFBLEVBQUE7Z0JBQ0EsUUFBQSxDQUFBLFFBQUEsRUFBQSxDQUFBO1lBQ0EsQ0FBQTtTQUNBLENBQUEsQ0FBQTtJQUNBLENBQUE7SUFFQTs7O09BR0E7SUFDQSwrQkFBQSxHQUFBLFVBQUEsSUFBQTtRQUNBLElBQUEsR0FBQSxHQUFBLElBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO1FBQ0EsSUFBQSxHQUFBLElBQUEsT0FBQSxFQUFBO1lBQ0EsT0FBQSxLQUFBLENBQUE7U0FDQTtRQUNBLElBQUEsR0FBQSxJQUFBLE1BQUEsRUFBQTtZQUNBLE9BQUEsSUFBQSxDQUFBO1NBQ0E7UUFDQSxJQUFBLE9BQUEsR0FBQSxJQUFBLFNBQUEsRUFBQTtZQUNBLE9BQUEsR0FBQSxDQUFBO1NBQ0E7UUFDQSxPQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLDhCQUFBLEdBQUEsVUFBQSxPQUFBO1FBQ0EsSUFBQSxPQUFBLEdBQUEsQ0FBQSxFQUFBO1lBQ0EsT0FBQSxPQUFBLENBQUE7U0FDQTtRQUNBLE9BQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLEVBQUEsR0FBQSxPQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEsNkJBQUEsR0FBQTtRQUNBLElBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUEsVUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxVQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUE7SUFDQSxDQUFBO0lBRUE7OztPQUdBO0lBQ0Esa0NBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxHQUFBLEVBQUEsQ0FBQTtRQUNBLEtBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBO1lBQ0EsSUFBQSxJQUFBLFlBQUEsR0FBQSxDQUFBLEdBQUEsYUFBQSxDQUFBO1NBQ0E7UUFDQSxJQUFBLENBQUEsT0FBQSxDQUFBLE1BQUEsQ0FBQSwyQkFBQSxHQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsUUFBQSxHQUFBLElBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLENBQUEsWUFBQSxDQUFBLEVBQUEsa0JBQUEsRUFBQTtZQUNBLFFBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEtBQUEsRUFBQSxDQUFBO1FBQ0EsQ0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUE7O09BRUE7SUFDQSwyQkFBQSxHQUFBO1FBQ0EsSUFBQSxRQUFBLEdBQUEsSUFBQSxDQUFBO1FBQ0EsSUFBQSxRQUFBLEdBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLEVBQUEsQ0FBQTtRQUNBLElBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQTtRQUNBLENBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxVQUFBLENBQUEsRUFBQSxLQUFBO1lBQ0EsSUFBQSxRQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUE7Z0JBQ0EsS0FBQSxDQUFBLEtBQUEsR0FBQSxRQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7YUFDQTtZQUNBLElBQUEsUUFBQSxDQUFBLE9BQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxFQUFBO2dCQUNBLEtBQUEsQ0FBQSxNQUFBLEdBQUEsUUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO2FBQ0E7WUFDQSxLQUFBLENBQUEsbUJBQUEsRUFBQSxDQUFBO1lBQ0EsS0FBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUE7WUFDQSxLQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBO1FBQ0EsQ0FBQSxDQUFBLENBQUE7UUFDQSxJQUFBLElBQUEsQ0FBQSxTQUFBLEVBQUEsRUFBQTtZQUNBLElBQUEsQ0FBQSxVQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsQ0FBQSxDQUFBO1NBQ0E7UUFDQSxJQUFBLENBQUEsS0FBQSxHQUFBLElBQUEsQ0FBQSxNQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEsK0JBQUEsR0FBQSxVQUFBLEtBQUEsRUFBQSxRQUFBO1FBQ0EsQ0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBLEtBQUE7WUFDQSxLQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsQ0FBQTtRQUNBLENBQUEsQ0FBQSxDQUFBO1FBQ0EsSUFBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLElBQUEsRUFBQSxDQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEsc0JBQUEsNkJBQUE7YUFBQTtZQUNBLE9BQUEsSUFBQSxDQUFBLE1BQUEsQ0FBQTtRQUNBLENBQUE7YUFFQSxVQUFBLEtBQUE7WUFDQSxJQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQTs7O09BSkE7SUFNQTs7T0FFQTtJQUNBLHlCQUFBLEdBQUE7UUFDQSxJQUFBLENBQUEsS0FBQSxFQUFBLENBQUE7SUFDQSxDQUFBO0lBRUE7O09BRUE7SUFDQSw2QkFBQSxHQUFBO1FBQ0EsSUFBQSxDQUFBLEtBQUEsRUFBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBOzs7T0FHQTtJQUNBLDhCQUFBLEdBQUEsVUFBQSxLQUFBO1FBQ0EsSUFBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBO1lBQ0EsSUFBQSxJQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLENBQUEsQ0FBQTtZQUNBLElBQUEsS0FBQSxHQUFBLElBQUEsS0FBQSxDQUFBLEtBQUEsRUFBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO1lBQ0EsT0FBQSxDQUFBLEtBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtTQUNBO1FBQ0EsSUFBQSxLQUFBLElBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBLEVBQUE7WUFDQSxJQUFBLEtBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO1lBQ0EsSUFBQSxLQUFBLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7WUFDQSxPQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBO1NBQ0E7UUFDQSxPQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUE7OztPQUdBO0lBQ0EseUJBQUEsR0FBQSxVQUFBLEtBQUE7UUFDQSxJQUFBLENBQUEsUUFBQSxFQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsWUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLGlDQUFBLEdBQUEsVUFBQSxLQUFBO1FBQ0EsSUFBQSxJQUFBLENBQUEsU0FBQSxFQUFBLEVBQUE7WUFDQSxPQUFBLElBQUEsQ0FBQSxVQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7U0FDQTtRQUNBLElBQUEsS0FBQSxHQUFBLENBQUEsRUFBQTtZQUNBLEtBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLENBQUE7U0FDQTthQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxFQUFBO1lBQ0EsS0FBQSxHQUFBLENBQUEsQ0FBQTtTQUNBO1FBQ0EsSUFBQSxRQUFBLEdBQUEsSUFBQSxDQUFBO1FBQ0EsSUFBQSxJQUFBLEdBQUEsSUFBQSxDQUFBLFVBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxLQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsS0FBQSxFQUFBLENBQUE7WUFDQSxJQUFBLENBQUEsSUFBQSxLQUFBLEVBQUE7Z0JBQ0EsS0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQ0EsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsSUFBQSxFQUNBLE9BQUEsRUFDQTtvQkFDQSxRQUFBLENBQUEsVUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO2dCQUNBLENBQUEsQ0FDQSxDQUFBO2dCQUNBLFFBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBO2dCQUNBLE9BQUE7YUFDQTtZQUNBLEtBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUNBLEVBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLElBQUEsRUFDQSxPQUFBLENBQ0EsQ0FBQTtRQUNBLENBQUEsQ0FBQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLCtCQUFBLEdBQUEsVUFBQSxLQUFBO1FBQ0EsSUFBQSxDQUFBLE1BQUEsR0FBQSxLQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLEVBQUE7WUFDQSxPQUFBO1NBQ0E7UUFDQSxJQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxrQkFBQSxDQUFBO2FBQ0EsRUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxRQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEsK0JBQUEsR0FBQSxVQUFBLEtBQUE7UUFDQSxJQUFBLE1BQUEsR0FBQSxJQUFBLENBQUEsU0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO1FBQ0EsSUFBQSxLQUFBLEdBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLEVBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxPQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsUUFBQSxHQUFBLElBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLENBQUEsRUFBQTtZQUNBLElBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsSUFBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxFQUFBO2dCQUNBLFFBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQTthQUNBO1lBQ0EsUUFBQSxDQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7UUFDQSxDQUFBLENBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxPQUFBLE9BQUEsSUFBQSxHQUFBLFFBQUEsU0FBQSxNQUFBLEdBQUE7SUFDQSxDQUFBO0lBRUE7Ozs7T0FJQTtJQUNBLG1DQUFBLEdBQUEsVUFBQSxJQUFBLEVBQUEsUUFBQTtRQUNBLElBQUEsQ0FBQSxJQUFBLENBQUEsT0FBQSxDQUNBLEVBQUEsSUFBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsRUFDQSxJQUFBLENBQUEsVUFBQSxDQUFBLGVBQUEsQ0FBQSxFQUNBLElBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxFQUNBLFFBQUEsQ0FDQSxDQUFBO0lBQ0EsQ0FBQTtJQUVBLHdCQUFBLEdBQUE7UUFDQSxJQUFBLElBQUEsQ0FBQSxPQUFBLEdBQUEsQ0FBQSxFQUFBO1lBQ0EsT0FBQTtTQUNBO1FBQ0EsSUFBQSxDQUFBLEtBQUEsRUFBQSxDQUFBO1FBQ0EsSUFBQSxJQUFBLENBQUEsS0FBQSxJQUFBLENBQUEsRUFBQTtZQUNBLElBQUEsQ0FBQSxhQUFBLEVBQUEsQ0FBQTtTQUNBO0lBQ0EsQ0FBQTtJQUNBLGlCQUFBO0FBQUEsQ0F0VkEsQUFzVkEsQ0F0VkEsR0FBQSxHQXNWQTtBQ3RWQTs7Ozs7O0dBTUE7QUFDQTtJQUNBLGdCQUNBLE9BQUEsRUFDQSxPQUFBO1FBRkEsaUJBWUE7UUFYQSxZQUFBLEdBQUEsT0FBQSxDQUFBO1FBZUEsVUFBQSxHQUFBLEVBQUEsQ0FBQTtRQVpBLElBQUEsQ0FBQSxPQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQUEsSUFBQSxvQkFBQSxFQUFBLEVBQUEsT0FBQSxDQUFBLENBQUE7UUFDQSxJQUFBLElBQUEsQ0FBQSxPQUFBLENBQUEsTUFBQSxJQUFBLENBQUEsRUFBQTtZQUNBLE9BQUE7U0FDQTtRQUNBLElBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLFVBQUEsQ0FBQSxFQUFBLElBQUE7WUFDQSxLQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQSxDQUFBLENBQUE7UUFDQSxJQUFBLENBQUEsU0FBQSxFQUFBLENBQUE7SUFDQSxDQUFBO0lBUUEsd0JBQUEsR0FBQSxVQUFBLElBQUE7UUFDQSxJQUFBLElBQUEsWUFBQSxVQUFBLEVBQUE7WUFDQSxJQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtZQUNBLE9BQUE7U0FDQTtRQUNBLElBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsVUFBQSxDQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQTtJQUNBLENBQUE7SUFFQTs7OztPQUlBO0lBQ0Esb0JBQUEsR0FBQSxVQUFBLFFBQUEsRUFBQSxDQUFBO1FBQUEsaUJBdUJBO1FBdkJBLGtCQUFBLEVBQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBO1FBQ0EsSUFBQSxPQUFBLENBQUEsSUFBQSxRQUFBLEVBQUE7WUFDQSxDQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQTtnQkFDQSxJQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxFQUFBO29CQUNBLE9BQUE7aUJBQ0E7Z0JBQ0EsUUFBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7WUFDQSxDQUFBLENBQUEsQ0FBQTtZQUNBLE9BQUE7U0FDQTtRQUNBLElBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxFQUFBO1lBQ0EsQ0FBQSxHQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsQ0FBQTtTQUNBO1FBQ0EsT0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBO1lBQ0EsSUFBQSxJQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtZQUNBLElBQUEsTUFBQSxHQUFBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7WUFDQSxJQUFBLE1BQUEsSUFBQSxJQUFBLEVBQUE7Z0JBQ0EsSUFBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBO2FBQ0E7WUFDQSxJQUFBLE1BQUEsSUFBQSxLQUFBLEVBQUE7Z0JBQ0EsT0FBQTthQUNBO1NBQ0E7SUFDQSxDQUFBO0lBRUEsMEJBQUEsR0FBQTtRQUNBLElBQUEsUUFBQSxHQUFBLElBQUEsQ0FBQTtRQUNBLElBQUEsQ0FBQSxNQUFBLEdBQUEscUJBQUEsQ0FBQTtZQUNBLFFBQUEsQ0FBQSxHQUFBLENBQUEsVUFBQSxJQUFBO2dCQUNBLElBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTtZQUNBLENBQUEsQ0FBQSxDQUFBO1lBQ0EsUUFBQSxDQUFBLFNBQUEsRUFBQSxDQUFBO1FBQ0EsQ0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBO0lBRUEsNkJBQUEsR0FBQTtRQUNBLElBQUEsSUFBQSxDQUFBLE1BQUEsRUFBQTtZQUNBLG9CQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO1NBQ0E7SUFDQSxDQUFBO0lBQ0EsYUFBQTtBQUFBLENBMUVBLEFBMEVBLElBQUE7QUFrQkE7SUFBQTtRQUNBLFNBQUEsR0FBQSxJQUFBLENBQUE7UUFDQSxjQUFBLEdBQUEsSUFBQSxDQUFBO1FBQ0Esa0JBQUEsR0FBQSxJQUFBLENBQUE7UUFDQSxrQkFBQSxHQUFBLE9BQUEsQ0FBQTtRQUNBLGFBQUEsR0FBQSxrQkFBQSxDQUFBO1FBQ0EsU0FBQSxHQUFBLGNBQUEsQ0FBQTtRQUNBLGFBQUEsR0FBQSxJQUFBLENBQUE7UUFDQSxlQUFBLEdBQUEsT0FBQSxDQUFBO1FBQ0EsU0FBQSxHQUFBLElBQUEsQ0FBQTtJQUNBLENBQUE7SUFBQSwyQkFBQTtBQUFBLENBVkEsQUFVQSxJQUFBO0FBR0EsQ0FBQTtBQUFBLENBQUEsVUFBQSxDQUFBO0lBQ0EsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLEdBQUEsVUFBQSxPQUFBO1FBQ0EsT0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLEVBQUEsT0FBQSxDQUFBLENBQUE7SUFDQSxDQUFBLENBQUE7QUFDQSxDQUFBLENBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSIsImZpbGUiOiJqcXVlcnkuc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYWJzdHJhY3QgY2xhc3MgRXZlIHtcclxuICAgIHB1YmxpYyBvcHRpb25zOiBhbnk7XHJcblxyXG4gICAgcHVibGljIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6IHRoaXMge1xyXG4gICAgICAgIHRoaXMub3B0aW9uc1snb24nICsgZXZlbnRdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhhc0V2ZW50KGV2ZW50OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhhc093blByb3BlcnR5KCdvbicgKyBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRyaWdnZXIoZXZlbnQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgbGV0IHJlYWxFdmVudCA9ICdvbicgKyBldmVudDtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzRXZlbnQoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1tyZWFsRXZlbnRdLmNhbGwodGhpcywgLi4uYXJncyk7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBQb2ludCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgaW5kZXg6IG51bWJlcixcclxuICAgICAgICB4OiBudW1iZXIgfCBKUXVlcnksXHJcbiAgICAgICAgcHVibGljIHdpZHRoPzogbnVtYmVyLFxyXG4gICAgICAgIHB1YmxpYyBoZWlnaHQ/OiBudW1iZXJcclxuICAgICkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgeCA9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMucHVzaCh4KTtcclxuICAgICAgICBbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdID0gdGhpcy5nZXRFbGVtZW50V2lkdGhBbmRIZWlnaHQoKTtcclxuICAgICAgICB0aGlzLnggPSAtdGhpcy53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBlbGVtZW50czogQXJyYXk8SlF1ZXJ5PiA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+W5YWD57Sg55qEeFxyXG4gICAgICogQHBhcmFtIHdpZHRoIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TGVmdCh3aWR0aDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy54IC0gKHdpZHRoIC0gMyAqIHRoaXMud2lkdGgpIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWFg+e0oOeahOWuveWSjOmrmFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KCk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIHJldHVybiBbdGhpcy5lbGVtZW50c1swXS53aWR0aCgpLCB0aGlzLmVsZW1lbnRzWzBdLmhlaWdodCgpXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW6lOeUqOW9k+WJjeeahOWuveWSjOmrmFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXBwbHlXaWR0aEFuZEhlaWdodCgpIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIGxldCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLmdldEVsZW1lbnRXaWR0aEFuZEhlaWdodCgpO1xyXG4gICAgICAgIGlmIChoZWlnaHQgPT0gdGhpcy5oZWlnaHQgJiYgdGhpcy53aWR0aCAhPSB3aWR0aCkge1xyXG4gICAgICAgICAgICAvLyDnrYnmr5TkvovnvKnmlL5cclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLndpZHRoICogaGVpZ2h0IC8gd2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQuZWFjaCh0aGlzLmVsZW1lbnRzLCBmdW5jdGlvbihpLCBlbGUpIHtcclxuICAgICAgICAgICAgZWxlLndpZHRoKGluc3RhbmNlLndpZHRoKTtcclxuICAgICAgICAgICAgZWxlLmhlaWdodChpbnN0YW5jZS5oZWlnaHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiY2xhc3MgU2xpZGVySXRlbSBleHRlbmRzIEV2ZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgZWxlbWVudDogSlF1ZXJ5LFxyXG4gICAgICAgIG9wdGlvbnM6IFNsaWRlck9wdGlvbnNcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgbGV0IG9wdGlvbiA9IHRoaXMuZWxlbWVudC5hdHRyKCdkYXRhLXNsaWRlcicpO1xyXG4gICAgICAgIGlmIChvcHRpb24gPT0gJzEnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXh0ZW5kT3B0aW9uKG9wdGlvbnMsIG9wdGlvbik7XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gdGhpcy5lbGVtZW50LmZpbmQodGhpcy5vcHRpb25zLml0ZW0pO1xyXG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLndpZHRoID0gdGhpcy5fZ2V0T3B0aW9uKCd3aWR0aCcpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5oZWlnaHQgPSB0aGlzLl9nZXRPcHRpb24oJ2hlaWdodCcpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5hbmltYXRpb25tb2RlID0gdGhpcy5fZ2V0T3B0aW9uKCdhbmltYXRpb25tb2RlJyk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmhhc3BvaW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdoYXNwb2ludCcpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYW5pbWF0aW9ubW9kZSArICctc2xpZGVyJyk7XHJcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuX2JveCA9IGl0ZW1zLnBhcmVudCgpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdkYXRhLXNsaWRlcicsIDEpO1xyXG4gICAgICAgIGlmICh0aGlzLl9sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRPbmx5KGl0ZW1zKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pbml0KGl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3B0aW9uczogU2xpZGVyT3B0aW9ucztcclxuXHJcbiAgICBwcml2YXRlIF9kYXRhOiBBcnJheTxQb2ludD4gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIF9sZW5ndGg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBfaW5kZXg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBfYm94OiBKUXVlcnk7XHJcblxyXG4gICAgcHJpdmF0ZSBfdGltZTogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgX3RpbWVDYWxsYmFjaygpIHtcclxuICAgICAgICBpZiAodGhpcy5fZ2V0T3B0aW9uKCdhdXRvJykpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2V4dGVuZE9wdGlvbihvcHRpb25zOiBhbnksIG9wdGlvbjogc3RyaW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgb3B0aW9uID0gSlNPTi5wYXJzZShvcHRpb24pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucywgb3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMluWPquacieS4gOW8oFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9pbml0T25seShpdGVtczogSlF1ZXJ5KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcztcclxuICAgICAgICB0aGlzLl9yZXNldE9ubHkoaXRlbXMpO1xyXG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLl9yZXNldE9ubHkoaXRlbXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5LiA5byg5Zu+55qE6auY5bqmXHJcbiAgICAgKiBAcGFyYW0gaXRlbSBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcmVzZXRPbmx5KGl0ZW06IEpRdWVyeSkge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMub3B0aW9ucy53aWR0aCA+IDAgPyB0aGlzLl9nZXRXaWR0aCh0aGlzLm9wdGlvbnMud2lkdGgpIDogaXRlbS53aWR0aCgpO1xyXG4gICAgICAgIGxldCBoZWlnaHQgPSB0aGlzLm9wdGlvbnMuaGVpZ2h0ID4gMCA/IHRoaXMuX2dldFdpZHRoKHRoaXMub3B0aW9ucy5oZWlnaHQpIDogaXRlbS5oZWlnaHQoKTtcclxuICAgICAgICBpdGVtLmNzcyh7aGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aH0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jc3Moe2hlaWdodDogaGVpZ2h0LCB3aWR0aDogd2lkdGh9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9uZWVkTW92ZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFuaW1hdGlvbm1vZGUgIT0gJ2ZhZGUnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NvcHlJdGVtKGl0ZW1zOiBKUXVlcnkpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDI7IGogKyspIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMCwgbGVuZ3RoID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3TGkgPSAkKGl0ZW1zW2ldLmNsb25lTm9kZSh0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhW2ldLmVsZW1lbnRzLnB1c2gobmV3TGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYm94LmFwcGVuZChuZXdMaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaW5pdChpdGVtczogSlF1ZXJ5KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcztcclxuICAgICAgICBpdGVtcy5lYWNoKChpLCBpdGVtKT0+IHtcclxuICAgICAgICAgICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KGksICQoaXRlbSkpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5fZGF0YS5wdXNoKHBvaW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpI3liLbkuKTmrKFcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fbmVlZE1vdmUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb3B5SXRlbShpdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzaXplKCk7XHJcbiAgICAgICAgLy8g6L6T5Ye65Y+v54K55Ye755qE5YiX6KGoXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNwb2ludCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRMaXN0UG9pbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYmluZEV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5fc2V0VGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2JpbmRFdmVudCgpIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5wcmV2aW91cykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnByZXZpb3VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQodGhpcy5vcHRpb25zLm5leHQpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVzaXplKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCEkLmZuLnN3aXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnN3aXBlKHtcclxuICAgICAgICAgICAgc3dpcGVMZWZ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLm5leHQoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3dpcGVSaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wcmV2aW91cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bphY3nva5cclxuICAgICAqIEBwYXJhbSBuYW1lIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9nZXRPcHRpb248VD4obmFtZTogc3RyaW5nKTogVCB7XHJcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMuZWxlbWVudC5kYXRhKG5hbWUpO1xyXG4gICAgICAgIGlmICh2YWwgPT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWwgPT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbCB8fCB0aGlzLm9wdGlvbnNbbmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZ2V0V2lkdGgocmVsdGl2ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAocmVsdGl2ZSA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbHRpdmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQud2lkdGgoKSAqIHJlbHRpdmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2V0VGltZSgpIHtcclxuICAgICAgICB0aGlzLl90aW1lID0gKHRoaXMuX2dldE9wdGlvbjxudW1iZXI+KCdzcGFjZVRpbWUnKSArIHRoaXMuX2dldE9wdGlvbjxudW1iZXI+KCdhbmltYXRpb25UaW1lJykpIC8gMTY7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDot7PovazngrlcclxuICAgICAqIEBwYXJhbSBjb3VudCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfYWRkTGlzdFBvaW50KCkge1xyXG4gICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8PSB0aGlzLl9sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICAgICAgaHRtbCArPSAnPGxpPjxzcGFuPicgKyBpICsnPC9zcGFuPjwvaT4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKCc8dWwgY2xhc3M9XCJzbGlkZXItcG9pbnRcIj4nKyBodG1sICsnPC91bD4nKTtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbih0aGlzLl9nZXRPcHRpb24oJ3BvaW50RXZlbnQnKSwgXCIuc2xpZGVyLXBvaW50IGxpXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5pbmRleCA9ICQodGhpcykuaW5kZXgoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa1j+iniOWZqOWwuuWvuOWPmOWMllxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzaXplKCkge1xyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG1heFdpZHRoID0gdGhpcy5lbGVtZW50LndpZHRoKCk7XHJcbiAgICAgICAgbGV0IHdpZHRoID0gMDtcclxuICAgICAgICAkLmVhY2godGhpcy5fZGF0YSwgZnVuY3Rpb24oaSwgcG9pbnQpIHtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLm9wdGlvbnMud2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludC53aWR0aCA9IGluc3RhbmNlLl9nZXRXaWR0aChpbnN0YW5jZS5vcHRpb25zLndpZHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2Uub3B0aW9ucy5oZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludC5oZWlnaHQgPSBpbnN0YW5jZS5fZ2V0V2lkdGgoaW5zdGFuY2Uub3B0aW9ucy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBvaW50LmFwcGx5V2lkdGhBbmRIZWlnaHQoKTtcclxuICAgICAgICAgICAgd2lkdGggKz0gcG9pbnQud2lkdGg7XHJcbiAgICAgICAgICAgIHBvaW50LnggPSAtd2lkdGg7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuX25lZWRNb3ZlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fYXBwbHlTaXplKHdpZHRoLCBtYXhXaWR0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLl9pbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hcHBseVNpemUod2lkdGg6IG51bWJlciwgbWF4V2lkdGg6IG51bWJlcikge1xyXG4gICAgICAgICQuZWFjaCh0aGlzLl9kYXRhLCBmdW5jdGlvbihpLCBwb2ludCkge1xyXG4gICAgICAgICAgICBwb2ludC54IC09IHdpZHRoO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2JveC5jc3Moe2xlZnQ6IHRoaXMuX2RhdGFbdGhpcy5faW5kZXhdLmdldExlZnQobWF4V2lkdGgpICsgXCJweFwifSk7XHJcbiAgICAgICAgdGhpcy5fYm94LndpZHRoKHdpZHRoICogMyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGluZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBpbmRleChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5nb3RvKGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4i+S4gOS4qlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmV4dCgpIHtcclxuICAgICAgICB0aGlzLmluZGV4ICsrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiK5LiA5LiqXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwcmV2aW91cygpIHtcclxuICAgICAgICB0aGlzLmluZGV4IC0tO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6LW35aeL54K55ZKM57uI54K5XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2dldFBvaW50KGluZGV4OiBudW1iZXIpOiBQb2ludFtdIHtcclxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIGxldCBsYXN0ID0gdGhpcy5fZGF0YVt0aGlzLl9kYXRhLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoaW5kZXgsIHRoaXMuX2RhdGFbMF0ueCArIGxhc3Qud2lkdGgsIGxhc3Qud2lkdGgsIGxhc3QuaGVpZ2h0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFtwb2ludCwgbGFzdF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbmRleCA+PSB0aGlzLl9kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgZmlyc3QgPSB0aGlzLl9kYXRhWzBdO1xyXG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoaW5kZXgsIHRoaXMuX2RhdGFbdGhpcy5fZGF0YS5sZW5ndGggLSAxXS54IC0gZmlyc3Qud2lkdGgsIGZpcnN0LndpZHRoLCBmaXJzdC5oZWlnaHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3BvaW50LCBmaXJzdF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbdGhpcy5fZGF0YVtpbmRleF0sIHRoaXMuX2RhdGFbaW5kZXhdXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOi3s+i9rFxyXG4gICAgICogQHBhcmFtIGluZGV4IFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ290byhpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMuX2NoYW5nZVBvaW50KGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jaGFuZ2VQb2ludChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25lZWRNb3ZlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vdmVQb2ludChpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLl9kYXRhLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA+PSB0aGlzLl9kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHRpbWUgPSB0aGlzLl9nZXRPcHRpb248bnVtYmVyPignYW5pbWF0aW9uVGltZScpO1xyXG4gICAgICAgIHRoaXMuX2RhdGEuZm9yRWFjaCgocG9pbnQsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGkgPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHBvaW50LmVsZW1lbnRzWzBdLmFuaW1hdGUoXHJcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDF9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3N3aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuX3Nob3dQb2ludChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnRyaWdnZXIoJ2NoYW5nZScsIHBvaW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwb2ludC5lbGVtZW50c1swXS5hbmltYXRlKFxyXG4gICAgICAgICAgICAgICAge29wYWNpdHk6IDB9LFxyXG4gICAgICAgICAgICAgICAgdGltZSxcclxuICAgICAgICAgICAgICAgICdzd2luZydcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zaG93UG9pbnQoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2luZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaGFzcG9pbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnQuZmluZChcIi5zbGlkZXItcG9pbnQgbGlcIilcclxuICAgICAgICAuZXEoaW5kZXgpLmFkZENsYXNzKFwiYWN0aXZlXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfbW92ZVBvaW50KGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcG9pbnRzID0gdGhpcy5fZ2V0UG9pbnQoaW5kZXgpO1xyXG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMuZWxlbWVudC53aWR0aCgpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5oZWlnaHQocG9pbnRzWzBdLmhlaWdodCk7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcztcclxuICAgICAgICB0aGlzLl9nb0FuZENhbGxiYWNrKHBvaW50c1swXS5nZXRMZWZ0KHdpZHRoKSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChwb2ludHNbMF0uaW5kZXggIT0gcG9pbnRzWzFdLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5fYm94LmNzcyh7bGVmdDogcG9pbnRzWzFdLmdldExlZnQod2lkdGgpICsgJ3B4J30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluc3RhbmNlLl9zaG93UG9pbnQocG9pbnRzWzFdLmluZGV4KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIC4uLnBvaW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vliqjliqjnlLvlj4rlm57osINcclxuICAgICAqIEBwYXJhbSBsZWZ0IFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9nb0FuZENhbGxiYWNrKGxlZnQ6IG51bWJlciwgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fYm94LmFuaW1hdGUoXHJcbiAgICAgICAgICAgIHtsZWZ0OiBsZWZ0ICsgXCJweFwifSwgXHJcbiAgICAgICAgICAgIHRoaXMuX2dldE9wdGlvbjxudW1iZXI+KCdhbmltYXRpb250aW1lJyksIFxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9ubW9kZSwgXHJcbiAgICAgICAgICAgIGNhbGxiYWNrXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcnVuKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdGltZSAtLTtcclxuICAgICAgICBpZiAodGhpcy5fdGltZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qIVxyXG4gKiBqcXVlcnkuc2xpZGVyIC0gaHR0cHM6Ly9naXRodWIuY29tL3p4NjQ4MzgzMDc5L1pvRHJlYW0uVUlcclxuICogVmVyc2lvbiAtIDEuMFxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgLSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNyBab0RyZWFtXHJcbiAqL1xyXG5jbGFzcyBTbGlkZXIge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIGVsZW1lbnQ6IEpRdWVyeSxcclxuICAgICAgICBvcHRpb25zPzogU2xpZGVyT3B0aW9uc1xyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIG5ldyBTbGlkZXJEZWZhdWx0T3B0aW9ucygpLCBvcHRpb25zKTtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmVhY2goKGksIGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hZGRJdGVtKCQoaXRlbSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3J1blRpbWVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9wdGlvbnM6IFNsaWRlck9wdGlvbnM7XHJcblxyXG4gICAgcHJpdmF0ZSBfZGF0YTogQXJyYXk8U2xpZGVySXRlbT4gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIF90aW1lcjogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBhZGRJdGVtKGl0ZW06IFNsaWRlckl0ZW0gfCBKUXVlcnkpIHtcclxuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFNsaWRlckl0ZW0pIHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RhdGEucHVzaChuZXcgU2xpZGVySXRlbShpdGVtLCB0aGlzLm9wdGlvbnMpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWAkuW6j+W+queOr1xyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIOi/lOWbnmZhbHNlIOe7k+adn+W+queOr++8jOi/lOWbniB0cnVlIOWIoOmZpFxyXG4gICAgICogQHBhcmFtIGkg5Yid5aeL5YC8XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXAoY2FsbGJhY2s6IChpdGVtOiBTbGlkZXJJdGVtLCBpbmRleDogbnVtYmVyKSA9PiBhbnksIGk6IG51bWJlciB8IG51bWJlcltdID0gdGhpcy5fZGF0YS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpICE9ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGkuZm9yRWFjaChqID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IHRoaXMuX2RhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5fZGF0YVtqXSwgaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpID49IHRoaXMuX2RhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGkgPSB0aGlzLl9kYXRhLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoOyBpID49IDA7IGkgLS0pIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9kYXRhW2ldO1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gY2FsbGJhY2soaXRlbSwgaSk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3J1blRpbWVyKCkge1xyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fdGltZXIgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLm1hcChpdGVtPT4ge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5ydW4oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLl9ydW5UaW1lcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NhbmNlbFRpbWVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lcikge1xyXG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl90aW1lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU2xpZGVyT3B0aW9ucyB7XHJcbiAgICBpdGVtPzogc3RyaW5nLFxyXG4gICAgYm94Pzogc3RyaW5nLFxyXG4gICAgd2lkdGg/OiBudW1iZXIsICAgLy/nu5/kuIDmjIflrprlrr3luqZcclxuICAgIGhlaWdodD86IG51bWJlciwgIC8v57uf5LiA5oyH5a6a6auY5bqm77yMIOWwj+aVsOaXtuW3smJveOeahOWuveW6puS4uuWHhlxyXG4gICAgc3BhY2V0aW1lPzogbnVtYmVyLFxyXG4gICAgYW5pbWF0aW9udGltZT86IG51bWJlcixcclxuICAgIGFuaW1hdGlvbm1vZGU/OiBzdHJpbmcsXHJcbiAgICBwcmV2aW91cz86IHN0cmluZyxcclxuICAgIG5leHQ/OiBzdHJpbmcsXHJcbiAgICBoYXNwb2ludD86IGJvb2xlYW4sICAgLy/mmK/lkKbmnInngrnlh7vot7PovaxcclxuICAgIHBvaW50ZXZlbnQ/OiBzdHJpbmcsICAgLy8g6Lez6L2s6Kem5Y+R5LqL5Lu2XHJcbiAgICBhdXRvPzogYm9vbGVhbiwgIC8v5piv5ZCm6Ieq5Yqo5pKt5pS+XHJcbiAgICBvbmNoYW5nZT86IChzdGFydDogUG9pbnQsIGVuZDogUG9pbnQpID0+IGFueTsgLy/liIfmjaLkuovku7ZcclxufVxyXG5cclxuY2xhc3MgU2xpZGVyRGVmYXVsdE9wdGlvbnMgaW1wbGVtZW50cyBTbGlkZXJPcHRpb25zIHtcclxuICAgIGl0ZW06IHN0cmluZyA9ICdsaSc7XHJcbiAgICBzcGFjZXRpbWU6IG51bWJlciA9IDMwMDA7XHJcbiAgICBhbmltYXRpb250aW1lOiBudW1iZXIgPSAxMDAwO1xyXG4gICAgYW5pbWF0aW9ubW9kZTogc3RyaW5nID0gXCJzd2luZ1wiO1xyXG4gICAgcHJldmlvdXM6IHN0cmluZyA9IFwiLnNsaWRlci1wcmV2aW91c1wiO1xyXG4gICAgbmV4dDogc3RyaW5nID0gXCIuc2xpZGVyLW5leHRcIjtcclxuICAgIGhhc3BvaW50OiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHBvaW50ZXZlbnQ6IHN0cmluZyA9IFwiY2xpY2tcIjtcclxuICAgIGF1dG86IGJvb2xlYW4gPSB0cnVlO1xyXG59XHJcblxyXG5cclxuIDsoZnVuY3Rpb24oJDogYW55KSB7XHJcbiAgJC5mbi5zbGlkZXIgPSBmdW5jdGlvbihvcHRpb25zID86IFNsaWRlck9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgU2xpZGVyKHRoaXMsIG9wdGlvbnMpOyBcclxuICB9O1xyXG59KShqUXVlcnkpOyJdfQ==
