var __extends=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)i.hasOwnProperty(e)&&(t[e]=i[e])};return function(i,e){function n(){this.constructor=i}t(i,e),i.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),Eve=function(){function t(){}return t.prototype.on=function(t,i){return this.options["on"+t]=i,this},t.prototype.hasEvent=function(t){return this.options.hasOwnProperty("on"+t)},t.prototype.trigger=function(t){for(var i=[],e=1;e<arguments.length;e++)i[e-1]=arguments[e];var n="on"+t;if(this.hasEvent(t)){return(o=this.options[n]).call.apply(o,[this].concat(i));var o}},t}(),Point=function(){function t(t,i,e,n){if(this.index=t,this.width=e,this.height=n,this.elements=[],"number"==typeof i)return void(this.x=i);this.elements.push(i),o=this.getElementWidthAndHeight(),this.width=o[0],this.height=o[1],this.x=-this.width;var o}return t.prototype.getLeft=function(t){return this.x-(this.width-t)/2},t.prototype.getElementWidthAndHeight=function(){return[this.elements[0].width(),this.elements[0].height()]},t.prototype.applyWidthAndHeight=function(){var t=this,i=this.getElementWidthAndHeight(),e=i[0],n=i[1];n==this.height&&this.width!=e&&(this.height=this.width*n/e),$.each(this.elements,function(i,e){e.width(t.width),e.height(t.height)})},t}(),SliderItem=function(t){function i(i,e){var n=t.call(this)||this;if(n.element=i,n.options=e,n._data=[],n._length=0,n._index=0,n.element.attr("data-slider"))return n;var o=n.element.find(n.options.item);return o.length<2?n:(n._length=o.length,n._box=o.parent(),n._init(o),n.element.attr("data-slider",1),n)}return __extends(i,t),i.prototype._timeCallback=function(){this.options.auto&&this.next()},i.prototype._init=function(t){var i=this;t.each(function(t,e){var n=new Point(t,$(e));i._data.push(n)});for(var e=0;e<2;e++)for(var n=0,o=t.length;n<o;n++){var h=$(t[n].cloneNode(!0));this._data[n].elements.push(h),this._box.append(h)}this.resize(),i.options.hasPoint&&this._addListPoint(),this._bindEvent(),this._setTime()},i.prototype._bindEvent=function(){var t=this;this.element.find(this.options.previous).click(function(){t.previous()}),this.element.find(this.options.next).click(function(){t.next()}),$(window).resize(function(){t.resize()}),$.fn.swipe&&this.element.swipe({swipeLeft:function(){t.next()},swipeRight:function(){t.previous()}})},i.prototype._getWidth=function(t){return t>1?t:this.element.width()*t},i.prototype._setTime=function(){this._time=(this.options.spaceTime+this.options.animationTime)/16},i.prototype._addListPoint=function(){for(var t="",i=this._length;i>0;i--)t+="<li></i>";this.element.append('<ul class="slider-point">'+t+"</ul>");var e=this;this.element.on("click",".slider-point li",function(){e.index=$(this).index()+1})},i.prototype.resize=function(){var t=this,i=this.element.width(),e=0;$.each(this._data,function(i,n){t.options.width>0&&(n.width=t._getWidth(t.options.width)),t.options.height>0&&(n.height=t._getWidth(t.options.height)),n.applyWidthAndHeight(),e+=n.width,n.x=-e}),$.each(this._data,function(t,i){i.x-=e}),this._box.css({left:this._data[this._index].getLeft(i)+"px"}),this._box.width(3*e),this.index=this._index},Object.defineProperty(i.prototype,"index",{get:function(){return this._index},set:function(t){this.goto(t)},enumerable:!0,configurable:!0}),i.prototype.next=function(){this.index++},i.prototype.previous=function(){this.index--},i.prototype._getPoint=function(t){if(t<0){var i=this._data[this._data.length-1],e=new Point(t,this._data[0].x+i.width,i.width,i.height);return[e,i]}if(t>=this._data.length){var n=this._data[0],e=new Point(t,this._data[this._data.length-1].x-n.width,n.width,n.height);return[e,n]}return[this._data[t],this._data[t]]},i.prototype.goto=function(t){this._setTime();var i=this._getPoint(t),e=this.element.width();this.element.height(i[0].height);var n=this;this._goAndCallback(i[0].getLeft(e),function(){i[0].index!=i[1].index&&n._box.css({left:i[1].getLeft(e)+"px"}),n._index=i[1].index}),this.trigger.apply(this,["change"].concat(i)),this.options.hasPoint&&this.element.find(".slider-point li").eq(t-1).addClass("active").siblings().removeClass("active")},i.prototype._goAndCallback=function(t,i){this._box.animate({left:t+"px"},this.options.animationTime,this.options.animationMode,i)},i.prototype.run=function(){this._length<1||--this._time<=0&&this._timeCallback()},i}(Eve),Slider=function(){function t(t,i){var e=this;this.element=t,this._data=[],this.options=$.extend({},new SliderDefaultOptions,i),0!=this.element.length&&(this.element.each(function(t,i){e.addItem($(i))}),this._runTimer())}return t.prototype.addItem=function(t){if(t instanceof SliderItem)return void this._data.push(t);this._data.push(new SliderItem(t,this.options))},t.prototype.map=function(t,i){var e=this;if(void 0===i&&(i=this._data.length-1),"number"!=typeof i)return void i.forEach(function(i){i<0||i>=e._data.length||t(e._data[i],i)});for(i>=this._data.length&&(i=this._data.length-1);i>=0;i--){var n=this._data[i],o=t(n,i);if(1==o&&this._data.splice(i,1),0==o)return}},t.prototype._runTimer=function(){var t=this;this._timer=requestAnimationFrame(function(){t.map(function(t){t.run()}),t._runTimer()})},t.prototype._cancelTimer=function(){this._timer&&cancelAnimationFrame(this._timer)},t}(),SliderDefaultOptions=function(){function t(){this.item="li",this.spaceTime=3e3,this.animationTime=1e3,this.animationMode="swing",this.previous=".slider-previous",this.next=".slider-next",this.hasPoint=!0,this.auto=!0}return t}();!function(t){t.fn.slider=function(t){return new Slider(this,t)}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
