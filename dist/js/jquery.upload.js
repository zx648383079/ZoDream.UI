var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Eve = /** @class */ (function () {
    function Eve() {
    }
    Eve.prototype.on = function (event, callback) {
        this.options['on' + event] = callback;
        return this;
    };
    Eve.prototype.hasEvent = function (event) {
        return this.options.hasOwnProperty('on' + event);
    };
    Eve.prototype.trigger = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var realEvent = 'on' + event;
        if (!this.hasEvent(event)) {
            return;
        }
        return (_a = this.options[realEvent]).call.apply(_a, [this].concat(args));
        var _a;
    };
    return Eve;
}());
/*!
 * jquery.upload - https://github.com/zx648383079/ZoDream.UI
 * Version - 1.0
 * Licensed under the MIT license - http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2017 ZoDream
 */
/**
 * EXAMPLE:
 * $('#upload').upload({
 *      url: 'upload.php',
 *      name: 'file',
 *      template: '{url}',
 *      grid: '.img'
 * });
 */
var Upload = /** @class */ (function (_super) {
    __extends(Upload, _super);
    function Upload(element, option) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.options = $.extend({}, new UploadDefaultOption(), option);
        _this.options.data = $.extend({}, _this.options.data, _this.getData());
        _this.getElement = _this.options.getElement.bind(_this);
        if (_this.element) {
            _this.addEvent();
        }
        return _this;
    }
    Upload.prototype.addEvent = function () {
        var instance = this;
        this.element.click(function () {
            instance.currentElement = $(this);
            instance.start();
        });
        $(this.options.grid).on('click', this.options.removeTag, this.options.removeCallback);
    };
    Upload.prototype.start = function () {
        var instance = this;
        var element = $('.' + this.options.fileClass);
        if (element.length < 1) {
            var file = document.createElement('input');
            file.type = 'file';
            file.className = this.options.fileClass;
            file.multiple = this.options.multiple;
            file.accept = this.options.filter;
            document.body.appendChild(file);
            element = $(file).bind('change', function () {
                instance.uploadFiles(this.files);
            }).hide();
        }
        else {
            element.val('');
            element.attr('multiple', this.options.multiple ? 'true' : 'false');
            element.attr('accept', this.options.filter);
            if (this.options.dynamic) {
                element.unbind('change').bind('change', function () {
                    instance.uploadFiles(this.files);
                });
            }
        }
        element.click();
    };
    Upload.prototype.uploadFiles = function (files) {
        if (this.options.allowMultiple) {
            this.uploadMany(files);
            return;
        }
        var instance = this;
        $.each(files, function (i, file) {
            instance.uploadOne(file);
        });
    };
    Upload.prototype.uploadMany = function (files) {
        var instance = this;
        var data = new FormData();
        $.each(files, function (i, file) {
            data.append(instance.options.name, file);
        });
        if (this.trigger('before', data, this.currentElement) === false) {
            console.log('before upload is false');
            return;
        }
        var opts = {
            url: this.options.url,
            type: 'POST',
            data: data,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                data = instance.trigger('after', data, instance.currentElement);
                if (data == false) {
                    console.log('after upload is false');
                    return;
                }
                if (data instanceof Array) {
                    $.each(data, function (i, item) {
                        instance.deal($.extend({}, instance.options.data, item));
                    });
                    return;
                }
                instance.deal($.extend({}, instance.options.data, data));
            }
        };
        if (this.hasEvent('progress')) {
            opts['xhr'] = function () {
                var xhr = $.ajaxSettings.xhr();
                if (onprogress && xhr.upload) {
                    xhr.upload.addEventListener('progress', this.options.onprogress, false);
                    return xhr;
                }
            };
        }
        $.ajax(opts);
    };
    Upload.prototype.uploadOne = function (file) {
        var instance = this;
        var data = new FormData();
        data.append(this.options.name, file);
        if (this.trigger('before', data, this.currentElement) === false) {
            console.log('before upload is false');
            return;
        }
        var opts = {
            url: this.options.url,
            type: 'POST',
            data: data,
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                data = instance.trigger('after', data, instance.currentElement);
                if (data == false) {
                    console.log('after upload is false');
                    return;
                }
                instance.deal($.extend({}, instance.options.data, data));
            }
        };
        if (this.hasEvent('progress')) {
            opts['xhr'] = function () {
                var xhr = $.ajaxSettings.xhr();
                if (onprogress && xhr.upload) {
                    xhr.upload.addEventListener('progress', this.options.onprogress, false);
                    return xhr;
                }
            };
        }
        $.ajax(opts);
    };
    Upload.prototype.deal = function (data) {
        var value = typeof this.options.template == 'function' ? this.options.template.call(this, data) : this.replace(data);
        if (value == false) {
            console.log('template is false');
            return;
        }
        if (false === this.trigger('success', data, this.currentElement)) {
            console.log('success is false');
            return;
        }
        var urlFor = this.options.grid;
        if (this.currentElement && this.currentElement.length > 0) {
            urlFor = this.currentElement.attr('data-grid') || this.options.grid;
        }
        if (!urlFor) {
            console.log('grid element is false');
            return;
        }
        var tags = urlFor.split('|');
        var instance = this;
        tags.forEach(function (tag) {
            var item = instance.getElement(tag, instance.currentElement);
            if (item.length == 0) {
                return;
            }
            item.each(function (i, element) {
                var ele = $(element);
                if (ele.is('input') || ele.is('textarea')) {
                    ele.val(value);
                    return;
                }
                if (ele.is('img')) {
                    ele.attr('src', value);
                    return;
                }
                if (instance.options.isAppend) {
                    ele.append(value);
                }
                else {
                    ele.prepend(value);
                }
            });
        });
    };
    Upload.prototype.getData = function () {
        if (!this.element || this.element.length < 1) {
            return {};
        }
        var data = {};
        var arg = this.element.attr('data-data');
        if (!arg) {
            return data;
        }
        var args = arg.split(',');
        args.forEach(function (item) {
            var keyValue = item.split(':');
            var key = keyValue[0].trim();
            if (key) {
                data[key] = keyValue[1].trim();
            }
        });
        return data;
    };
    Upload.prototype.replace = function (data) {
        var html = typeof this.options.template == 'function' ? this.options.template.call(this, data) : this.options.template;
        for (var i in data) {
            if (data.hasOwnProperty(i)) {
                html = html.replace(new RegExp('{' + i + '}', 'g'), data[i]);
            }
        }
        return html;
    };
    return Upload;
}(Eve));
var UploadDefaultOption = /** @class */ (function () {
    function UploadDefaultOption() {
        this.name = 'file';
        this.isAppend = true;
        this.template = '{url}';
        //grid: string = '.zdGrid';
        this.removeTag = '.delete';
        this.removeCallback = function () {
            $(this).parent().remove();
        };
        this.multiple = false;
        this.allowMultiple = false;
        this.data = {};
        this.fileClass = 'zdUploadFile';
        this.filter = '';
        this.onafter = function (data) {
            // 防止ajax自动转化json
            if (typeof data != 'object') {
                data = JSON.parse(data);
            }
            if (data.code == 0) {
                return data.data;
            }
            return false;
        };
        this.dynamic = true;
        this.getElement = function (tag) {
            return $(tag);
        };
    }
    return UploadDefaultOption;
}());
;
(function ($) {
    $.fn.upload = function (option) {
        return new Upload(this, option);
    };
})(jQuery);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
